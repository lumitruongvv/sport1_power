C51 COMPILER V9.60.0.0   IRF                                                               01/31/2021 11:14:45 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE IRF
OBJECT MODULE PLACED IN .\Objects\Irf.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Mid\Irf.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\App;..\Mid;..\Driv
                    -er;..\Utilities;..\Common) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Irf.lst) TABS(2) OBJECT(.\Objects\Irf.obj)

line level    source

   1          /*
   2           * Copyright (c) 2021
   3           * Team, JSC.
   4           * All Rights Reserved
   5           *
   6           *
   7           * Description:
   8           *
   9           * Author: Truongvv
  10           *
  11           * Last Changed By:  $Author: Truongvv $
  12           * Revision:         $Revision: 1.0 $
  13           * Last Changed:     $Date: x/x/xxxx $
  14           */
  15          #include "N76E003.h"
  16          #include "SFR_Macro.h"
  17          #include "Function_Define.h"
  18          #include "irfapp_main.h"
  19          #include "Irf.h"
  20          #include "uart.h"
  21          #include "queue.h"
  22          #include "xor.h"
*** WARNING C318 IN LINE 13 OF ..\Utilities\xor.h: can't open file 'stdint.h'
  23          
  24          QUEUEx_t    irf_CommandQueue;
  25          irf_Command_t irf_CommandBuff[IRF_QUEUE_MAX];
  26          
  27          /******************************************************************************/
  28          /*                            FUNCTIONS                              */
  29          /******************************************************************************/
  30          static void IRF_CallBackHandle(void);
  31          
  32          /**
  33           * @func    IRF_Init
  34           * @brief   None
  35           * @param   None
  36           */
  37          void IRF_Init(void)
  38          {
  39   1          UART_Init(UART_BAUDRATE);
  40   1          UART_CallBackInit(IRF_CallBackHandle);
  41   1          QUEUE_Init(&irf_CommandQueue, (u8*)irf_CommandBuff,\
  42   1                      IRF_QUEUE_MAX, sizeof(irf_Command_t));
  43   1          UART_Enable();
  44   1      }
  45          
  46          /**
  47           * @func    IRF_CallBackHandle
  48           * @brief   None
  49           * @param   None
  50           */
  51          static void IRF_CallBackHandle(void)
  52          {
  53   1          static u8 revByte = 0;
C51 COMPILER V9.60.0.0   IRF                                                               01/31/2021 11:14:45 PAGE 2   

  54   1          static u16 revByteCount = 0;
  55   1          u8 revBuff[IRF_HEADER + IRF_BUFF_MAX + 1];
  56   1      
  57   1          revByte = UART_RevData();
  58   1          revBuff[revByteCount++] = revByte;
  59   1          if(revByteCount >= IRF_HEADER)
  60   1          {
  61   2              if(revByteCount == (IRF_HEADER + revBuff[3] + 1))
  62   2              {
  63   3                  if(revBuff[IRF_HEADER + revBuff[3]] == XOR_Caculator(revBuff, 0, IRF_HEADER + revBuff[3]))
  64   3                  {
  65   4                      QUEUE_Push(&irf_CommandQueue, revBuff);
  66   4                  }
  67   3                  revByteCount = 0;
  68   3              }
  69   2          }
  70   1      }
  71          
  72          /**
  73           * @func    IRF_Proc
  74           * @brief   None
  75           * @param   None
  76           */
  77          void IRF_Proc(void)
  78          {
  79   1          irf_Command_t irf_CommandBuff;
  80   1          if(!QUEUE_Empty(&irf_CommandQueue))
  81   1          {
  82   2              QUEUE_Get(&irf_CommandQueue, (u8*)&irf_CommandBuff);
  83   2              APP_CheckCommandExistAndExecutes(\
  84   2                  irf_CommandBuff.command, irf_CommandBuff.type,\
  85   2                  irf_CommandBuff.buff, irf_CommandBuff.length); 
  86   2          }
  87   1      }
  88          
  89          /**
  90           * @func    IRF_Send
  91           * @brief   None
  92           * @param   None
  93           */
  94          void IRF_Send(u8* buff, u8 length)
  95          {
  96   1          UART_SendData(buff, length);
  97   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    253    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     31      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
